<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 2/17/18
 * Time: 11:11 PM
 */

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

function poet_plugin_node_presave(Node $node)
{
// twig_var_dump($node->bundle());
    if ($node->isPublished()) {
        // The node has been published.
        $body = $node->get('body')->value;
        $summary = $node->get('body')->summary;
        $term = Term::load($node->get('field_tags')->target_id);
        if ($term) {
            $term_name = $term->getName();
        } else {
            $term_name = '';
        }
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtoYXJpczc3NkBnbWFpbC5jb20iLCJjbGllbnRfdG9rZW4iOiIxMGYwMjUxZC0xMWQyLTk0YzMtNTkzMi0xM2IwMGVhMDJlMjIiLCJpYXQiOjE1MTg5NDg4NjgsImV4cCI6MTUyMTcxMzY2OH0.sUtKbnQcLFa66pteo48ksW09Mr7lhX2c7Q7kJxzGTwI';
        $headers =
            [
                'token' => $token,
                'Content-Type' => 'application/json',
                'Accept' => 'application/json'
            ];
        $data = [
            'name' => $node->getTitle(),
            'content' => $body,
            'author' => $node->getOwner()->getAccountName(),
            'dateCreated' => date(DATE_ISO8601, $node->getCreatedTime()),
            'datePublished' => date(DATE_ISO8601, $node->getCreatedTime()),
            'tags' => $term_name
        ];

        $http = \Drupal::httpClient();
        $response = $http->post('https://api.frost.po.et/works', [
            'body' => json_encode($data),
            'headers' => $headers
        ]);
        if ($response->getStatusCode() == 200) {
            $body = json_decode($response->getBody());
            $node->set('field_workid', $body->workId);

        }


    }

}

function poet_plugin_node_view(array &$build, Node $node, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
    if ($node->field_workid) {
        if ($node->field_workid->value != '') {
            $build['signature'] = [
                '#theme' => 'poet_plugin_signature',
                '#work_id' => $node->field_workid->value,
                '#weight' => 10,
            ];

            $build['body']['#weight'] = 9;
        }
    }
}

function poet_plugin_theme()
{
    return [
        'poet_plugin_signature' => [
            'variables' => ['work_id' => NULL
            ],
        ],
    ];
}

function poet_plugin_node_update(Node $node)
{
    if ($node->isPublished()) {
        // The node has been published.
        $body = $node->get('body')->value;
        $summary = $node->get('body')->summary;
        $term = Term::load($node->get('field_tags')->target_id);
        if ($term) {
            $term_name = $term->getName();
        } else {
            $term_name = '';
        }
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImtoYXJpczc3NkBnbWFpbC5jb20iLCJjbGllbnRfdG9rZW4iOiIxMGYwMjUxZC0xMWQyLTk0YzMtNTkzMi0xM2IwMGVhMDJlMjIiLCJpYXQiOjE1MTg5NDg4NjgsImV4cCI6MTUyMTcxMzY2OH0.sUtKbnQcLFa66pteo48ksW09Mr7lhX2c7Q7kJxzGTwI';
        $headers =
            [
                'token' => $token,
                'Content-Type' => 'application/json',
                'Accept' => 'application/json'
            ];
        $data = [
            'name' => $node->getTitle(),
            'content' => $body,
            'author' => $node->getOwner()->getAccountName(),
            'dateCreated' => date(DATE_ISO8601, $node->getCreatedTime()),
            'datePublished' => date(DATE_ISO8601, $node->getCreatedTime()),
            'tags' => $term_name
        ];

        $http = \Drupal::httpClient();
        $response = $http->post('https://api.frost.po.et/works', [
            'body' => json_encode($data),
            'headers' => $headers
        ]);
        if ($response->getStatusCode() == 200) {
            $body = json_decode($response->getBody());
            $node->set('field_workid', $body->workId);

        }


    }


}

